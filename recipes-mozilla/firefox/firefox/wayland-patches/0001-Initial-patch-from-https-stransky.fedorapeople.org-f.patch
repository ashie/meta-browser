From 4d29ac54a6efcd13229a5464f8e57a92d42ee3bd Mon Sep 17 00:00:00 2001
From: Martin Stransky <stransky@anakreon.cz>
Date: Wed, 2 Sep 2015 13:13:05 +0200
Subject: [PATCH 1/8] Initial patch from
 https://stransky.fedorapeople.org/firefox-wayland-43-0.3.fc22.src.rpm

Signed-off-by: Takuro Ashie <ashie@homa.ne.jp>
---
 gfx/2d/DrawTargetCairo.cpp      |  9 +++++++-
 gfx/gl/GLContextProviderGLX.cpp |  8 +++++++
 gfx/thebes/gfxASurface.cpp      |  8 ++++++-
 modules/libpref/init/all.js     |  2 +-
 toolkit/xre/nsAppRunner.cpp     | 51 ++++++++++++++++++++++++++++++++++-------
 widget/gtk/mozgtk/mozgtk.c      |  5 ++++
 widget/gtk/nsScreenGtk.cpp      |  9 +++++++-
 widget/gtk/nsWindow.cpp         | 42 ++++++++++++++++++++++-----------
 widget/gtk/nsWindow.h           |  2 ++
 widget/nsShmImage.cpp           |  4 +++-
 10 files changed, 113 insertions(+), 27 deletions(-)

diff --git a/gfx/2d/DrawTargetCairo.cpp b/gfx/2d/DrawTargetCairo.cpp
index 82d18eb..67a09d5 100644
--- a/gfx/2d/DrawTargetCairo.cpp
+++ b/gfx/2d/DrawTargetCairo.cpp
@@ -678,7 +678,14 @@ GfxFormatForCairoSurface(cairo_surface_t* surface)
 {
   cairo_surface_type_t type = cairo_surface_get_type(surface);
   if (type == CAIRO_SURFACE_TYPE_IMAGE) {
-    return CairoFormatToGfxFormat(cairo_image_surface_get_format(surface));
+    cairo_format_t format = cairo_image_surface_get_format(surface);
+    if(format != CAIRO_FORMAT_INVALID) {
+        return CairoFormatToGfxFormat(format);
+    } else {
+        // Try to workaround a cairo bug when subsurfaces are reported
+        // as image surfaces but cairo_image_ functions fails.
+        return CairoContentToGfxFormat(cairo_surface_get_content(surface));
+    }
   }
 #ifdef CAIRO_HAS_XLIB_SURFACE
   // xlib is currently the only Cairo backend that creates 16bpp surfaces
diff --git a/gfx/gl/GLContextProviderGLX.cpp b/gfx/gl/GLContextProviderGLX.cpp
index aff5a78..5d99091 100644
--- a/gfx/gl/GLContextProviderGLX.cpp
+++ b/gfx/gl/GLContextProviderGLX.cpp
@@ -74,6 +74,14 @@ GLXLibrary::EnsureInitialized()
     }
     mTriedInitializing = true;
 
+#ifdef MOZ_WIDGET_GTK
+    if (!GDK_IS_X11_DISPLAY(gdk_display_get_default())) {
+        mGLXMajorVersion = 0;
+        mGLXMinorVersion = 0;
+        return false;
+    }
+#endif
+
     // Force enabling s3 texture compression. (Bug 774134)
     PR_SetEnv("force_s3tc_enable=true");
 
diff --git a/gfx/thebes/gfxASurface.cpp b/gfx/thebes/gfxASurface.cpp
index 2af66f7..7848eea 100644
--- a/gfx/thebes/gfxASurface.cpp
+++ b/gfx/thebes/gfxASurface.cpp
@@ -169,7 +169,13 @@ gfxASurface::Wrap (cairo_surface_t *csurf, const IntSize& aSize)
     cairo_surface_type_t stype = cairo_surface_get_type(csurf);
 
     if (stype == CAIRO_SURFACE_TYPE_IMAGE) {
-        result = new gfxImageSurface(csurf);
+        if (cairo_image_surface_get_format(csurf) != CAIRO_FORMAT_INVALID) {
+            result = new gfxImageSurface(csurf);
+        } else {
+            // Try to workaround a cairo bug when subsurfaces are reported
+            // as image surfaces but cairo_image_ functions fails.
+            result = new gfxUnknownSurface(csurf, aSize);
+        }
     }
 #ifdef CAIRO_HAS_WIN32_SURFACE
     else if (stype == CAIRO_SURFACE_TYPE_WIN32 ||
diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
index 7078c66..6f0b72f 100644
--- a/modules/libpref/init/all.js
+++ b/modules/libpref/init/all.js
@@ -4334,7 +4334,7 @@ pref("layers.max-active", -1);
 pref("layers.tiles.adjust", true);
 
 // Set the default values, and then override per-platform as needed
-pref("layers.offmainthreadcomposition.enabled", true);
+pref("layers.offmainthreadcomposition.enabled", false);
 // Compositor target frame rate. NOTE: If vsync is enabled the compositor
 // frame rate will still be capped.
 // -1 -> default (match layout.frame_rate or 60 FPS)
diff --git a/toolkit/xre/nsAppRunner.cpp b/toolkit/xre/nsAppRunner.cpp
index da73cd5..2014e6d 100644
--- a/toolkit/xre/nsAppRunner.cpp
+++ b/toolkit/xre/nsAppRunner.cpp
@@ -2957,7 +2957,39 @@ static void MOZ_gdk_display_close(GdkDisplay *display)
   (void) display;
 #endif
 }
-#endif // MOZ_WIDGET_GTK2
+
+static const char *detectDisplay(bool *aIsX11Display)
+{
+  *aIsX11Display = false;
+
+  // Honor user backend selection
+  const char *backend = PR_GetEnv("GDK_BACKEND");
+  if (backend) {
+    if (!strcmp(backend, "wayland")) {
+      return(PR_GetEnv("WAYLAND_DISPLAY"));
+    } else if (!strcmp(backend, "broadway")) {
+      return(PR_GetEnv("BROADWAY_DISPLAY"));
+    } else if (!strcmp(backend, "x11")) {
+      *aIsX11Display = true;
+      return(PR_GetEnv("DISPLAY"));
+    } else {
+      PR_fprintf(PR_STDERR, "Error: unsupported GDK_BACKEND selected\n");
+      return nullptr;
+    }
+  }
+
+  // Try wayland first and fallback to X11
+  const char *display_name;
+  if((display_name = PR_GetEnv("WAYLAND_DISPLAY"))) {
+    return display_name;
+  } else if((display_name = PR_GetEnv("DISPLAY"))) {
+    *aIsX11Display = true;
+    return display_name;
+  }
+
+  return nullptr;
+}
+#endif // MOZ_WIDGET_GTK
 
 /** 
  * NSPR will search for the "nspr_use_zone_allocator" symbol throughout
@@ -3714,10 +3746,10 @@ XREMain::XRE_mainStartup(bool* aExitFlag)
 #if defined(MOZ_WIDGET_GTK)
   // display_name is owned by gdk.
   const char *display_name = gdk_get_display_arg_name();
-  if (display_name) {
-    SaveWordToEnv("DISPLAY", nsDependentCString(display_name));
-  } else {
-    display_name = PR_GetEnv("DISPLAY");
+  // Wayland TODO - set isX11Display accordingly
+  bool isX11Display = true;
+  if (!display_name) {
+    display_name = detectDisplay(&isX11Display);
     if (!display_name) {
       PR_fprintf(PR_STDERR, "Error: no display specified\n");
       return 1;
@@ -3727,7 +3759,9 @@ XREMain::XRE_mainStartup(bool* aExitFlag)
 #ifdef MOZ_X11
   // Init X11 in thread-safe mode. Must be called prior to the first call to XOpenDisplay
   // (called inside gdk_display_open). This is a requirement for off main tread compositing.
-  XInitThreads();
+  if (isX11Display) {
+    XInitThreads();
+  }
 #endif
 #if defined(MOZ_WIDGET_GTK)
   {
@@ -3738,9 +3772,10 @@ XREMain::XRE_mainStartup(bool* aExitFlag)
     }
     gdk_display_manager_set_default_display (gdk_display_manager_get(),
                                              mGdkDisplay);
-    if (!GDK_IS_X11_DISPLAY(mGdkDisplay))
-      mDisableRemote = true;
   }
+
+  if (!GDK_IS_X11_DISPLAY(mGdkDisplay))
+    mDisableRemote = true;
 #endif
 #ifdef MOZ_ENABLE_XREMOTE
   // handle --remote now that xpcom is fired up
diff --git a/widget/gtk/mozgtk/mozgtk.c b/widget/gtk/mozgtk/mozgtk.c
index 0bb4dfd..c512912 100644
--- a/widget/gtk/mozgtk/mozgtk.c
+++ b/widget/gtk/mozgtk/mozgtk.c
@@ -576,6 +576,11 @@ STUB(gtk_color_chooser_get_type)
 STUB(gtk_color_chooser_set_rgba)
 STUB(gtk_color_chooser_get_rgba)
 STUB(gtk_color_chooser_set_use_alpha)
+STUB(gdk_cairo_create)
+STUB(gdk_screen_get_monitor_workarea)
+STUB(gdk_screen_get_primary_monitor)
+STUB(gtk_drawing_area_new)
+STUB(gdk_window_set_transient_for)
 #endif
 
 #ifdef GTK2_SYMBOLS
diff --git a/widget/gtk/nsScreenGtk.cpp b/widget/gtk/nsScreenGtk.cpp
index 625e298..732d2e3 100644
--- a/widget/gtk/nsScreenGtk.cpp
+++ b/widget/gtk/nsScreenGtk.cpp
@@ -155,7 +155,14 @@ nsScreenGtk :: Init (GdkWindow *aRootWindow)
   // versions of GDK predating the GdkScreen object.  See bug 256646.
   mAvailRect = mRect = nsIntRect(0, 0, width, height);
 
-#ifdef MOZ_X11
+#if (MOZ_WIDGET_GTK >= 3)
+  GdkScreen *screen = gdk_screen_get_default();
+  GdkRectangle rect;
+  gdk_screen_get_monitor_workarea(screen,
+                                  gdk_screen_get_primary_monitor(screen),
+                                  &rect);
+  mAvailRect = nsIntRect(rect.x, rect.x, rect.width, rect.height);
+#elif defined(MOZ_X11)
   // We need to account for the taskbar, etc in the available rect.
   // See http://freedesktop.org/Standards/wm-spec/index.html#id2767771
 
diff --git a/widget/gtk/nsWindow.cpp b/widget/gtk/nsWindow.cpp
index 2a49a1b..3b48c7841 100644
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -424,6 +424,7 @@ nsWindow::nsWindow()
     mHandleTouchEvent    = false;
 #endif
     mIsDragPopup         = false;
+    mIsX11Display     = GDK_IS_X11_DISPLAY(gdk_display_get_default());
 
     mContainer           = nullptr;
     mGdkWindow           = nullptr;
@@ -1525,7 +1526,7 @@ nsWindow::UpdateClientOffset()
 {
     PROFILER_LABEL("nsWindow", "UpdateClientOffset", js::ProfileEntry::Category::GRAPHICS);
 
-    if (!mIsTopLevel || !mShell || !mGdkWindow ||
+    if (!mIsTopLevel || !mShell || !mGdkWindow || !mIsX11Display ||
         gtk_window_get_window_type(GTK_WINDOW(mShell)) == GTK_WINDOW_POPUP) {
         mClientOffset = nsIntPoint(0, 0);
         return;
@@ -1956,7 +1957,7 @@ nsWindow::HasPendingInputEvent()
 #ifdef MOZ_X11
     XEvent ev;
     GdkDisplay* gdkDisplay = gdk_display_get_default();
-    if (GDK_IS_X11_DISPLAY(gdkDisplay)) {
+    if (mIsX11Display) {
         Display *display = GDK_DISPLAY_XDISPLAY(gdkDisplay);
         haveEvent =
             XCheckMaskEvent(display,
@@ -2586,8 +2587,7 @@ nsWindow::OnMotionNotifyEvent(GdkEventMotion *aEvent)
 #ifdef MOZ_X11
     XEvent xevent;
 
-    bool isX11Display = GDK_IS_X11_DISPLAY(gdk_display_get_default());
-    if (isX11Display) {
+    if (mIsX11Display) {
         while (XPending (GDK_WINDOW_XDISPLAY(aEvent->window))) {
             XEvent peeked;
             XPeekEvent (GDK_WINDOW_XDISPLAY(aEvent->window), &peeked);
@@ -3882,7 +3882,8 @@ nsWindow::Create(nsIWidget* aParent,
             // Similarly double buffering is controlled by the window's owning
             // widget.  Disable double buffering for painting directly to the
             // X Window.
-            gtk_widget_set_double_buffered(widgets[i], FALSE);
+            if (mIsX11Display)
+                gtk_widget_set_double_buffered(widgets[i], FALSE);
         }
 
         // We create input contexts for all containers, except for
@@ -3945,7 +3946,7 @@ nsWindow::Create(nsIWidget* aParent,
         Resize(mBounds.x, mBounds.y, mBounds.width, mBounds.height, false);
 
 #ifdef MOZ_X11
-    if (mGdkWindow) {
+    if (mIsX11Display && mGdkWindow) {
       mXDisplay = GDK_WINDOW_XDISPLAY(mGdkWindow);
       mXWindow = gdk_x11_window_get_xid(mGdkWindow);
 
@@ -3993,7 +3994,7 @@ nsWindow::SetWindowClass(const nsAString &xulWinType)
 
 #ifdef MOZ_X11
   GdkDisplay *display = gdk_display_get_default();
-  if (GDK_IS_X11_DISPLAY(display)) {
+  if (mIsX11Display) {
       XClassHint *class_hint = XAllocClassHint();
       if (!class_hint) {
         free(res_name);
@@ -5430,9 +5431,9 @@ draw_window_of_widget(GtkWidget *widget, GdkWindow *aWindow, cairo_t *cr)
         if (!window) {
             NS_WARNING("Cannot get nsWindow from GtkWidget");
         }
-        else {      
-            cairo_save(cr);      
-            gtk_cairo_transform_to_window(cr, widget, aWindow);  
+        else {
+            cairo_save(cr);
+            gtk_cairo_transform_to_window(cr, widget, aWindow);
             // TODO - window->OnExposeEvent() can destroy this or other windows,
             // do we need to handle it somehow?
             window->OnExposeEvent(cr);
@@ -6455,16 +6456,29 @@ nsWindow::GetDrawTarget(const nsIntRegion& aRegion)
 
 #ifdef MOZ_X11
 #  ifdef MOZ_HAVE_SHMIMAGE
-  if (nsShmImage::UseShm()) {
+  if (mIsX11Display && nsShmImage::UseShm()) {
     dt = nsShmImage::EnsureShmImage(size,
                                     mXDisplay, mXVisual, mXDepth,
                                     mShmImage);
   }
 #  endif  // MOZ_HAVE_SHMIMAGE
   if (!dt) {
-    RefPtr<gfxXlibSurface> surf = new gfxXlibSurface(mXDisplay, mXWindow, mXVisual, size);
-    if (!surf->CairoStatus()) {
-      dt = gfxPlatform::GetPlatform()->CreateDrawTargetForSurface(surf.get(), surf->GetSize());
+    if (mIsX11Display) {
+      RefPtr<gfxXlibSurface> surf = new gfxXlibSurface(mXDisplay, mXWindow, mXVisual, size);
+      if (!surf->CairoStatus()) {
+        dt = gfxPlatform::GetPlatform()->CreateDrawTargetForSurface(surf.get(), surf->GetSize());
+      }
+    } else {
+      cairo_t *cr = gdk_cairo_create(mGdkWindow);
+      cairo_surface_t *csurf = cairo_get_target(cr);
+      if (cairo_surface_status(csurf) == CAIRO_STATUS_SUCCESS) {
+        RefPtr<gfxASurface> surf = gfxASurface::Wrap(csurf, size);
+        if (!surf->CairoStatus()) {
+          dt = gfxPlatform::GetPlatform()->CreateDrawTargetForSurface(surf.get(), surf->GetSize());
+        }
+      } else {
+        NS_NOTREACHED("Missing cairo target?");
+      }
     }
   }
 #endif // MOZ_X11
diff --git a/widget/gtk/nsWindow.h b/widget/gtk/nsWindow.h
index 663006c..1a1d8e1 100644
--- a/widget/gtk/nsWindow.h
+++ b/widget/gtk/nsWindow.h
@@ -391,6 +391,8 @@ protected:
 #endif
     // true if this is a drag and drop feedback popup
     bool               mIsDragPopup;
+    // Can we access X?
+    bool                mIsX11Display;
 
 private:
     void               DestroyChildWindows();
diff --git a/widget/nsShmImage.cpp b/widget/nsShmImage.cpp
index 88571fd..15a63b4 100644
--- a/widget/nsShmImage.cpp
+++ b/widget/nsShmImage.cpp
@@ -27,7 +27,9 @@ static bool gShmAvailable = true;
 bool nsShmImage::UseShm()
 {
 #ifdef MOZ_WIDGET_GTK
-    return (gShmAvailable && !gfxPlatformGtk::GetPlatform()->UseXRender());
+    return (GDK_IS_X11_DISPLAY(gdk_display_get_default())) ?
+                      (gShmAvailable && !gfxPlatformGtk::GetPlatform()->UseXRender()) :
+                      false;
 #else
     return gShmAvailable;
 #endif
-- 
1.9.1

